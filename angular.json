trigger:
  - main

pool:
  name: Default

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '22.13.1'
    displayName: 'Install Node.js'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        echo "Node version:"
        node -v
        echo "NPM version:"
        npm -v
        echo "Directory contents:"
        dir
    displayName: 'Environment Info'

  - script: |
      npm config set strict-ssl false
      npm config set registry https://registry.npmjs.org/
      npm config set fetch-retries 100
      npm config set fetch-retry-mintimeout 60000
      npm config set fetch-retry-maxtimeout 300000
      npm config set timeout 0
      npm ci

      # Install Angular CLI globally
      npm install -g @angular/cli
    displayName: 'Install Dependencies and Angular CLI'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Ensure Angular CLI is installed
        npm install -g @angular/cli

        # Verify Angular CLI installation
        ng version
    displayName: 'Verify Angular CLI'

  - script: |
      # Install all node dependencies
      npm install

      # Check the current directory (make sure it's correct)
      echo "Current directory:"
      dir

      # Build the Angular app
      ng build --configuration=production

      # If the build fails, try using npx
      If ($LASTEXITCODE -ne 0) {
        Write-Host "Trying with npx..."
        npx ng build --configuration=production
      }
    displayName: 'Build Angular App'

  - script: |
      # List contents of dist directory to ensure output exists
      echo "Directory after build:"
      dir
      echo "Dist directory contents (if exists):"
      dir dist 2>nul || echo "Dist directory not found"
      echo "Looking for any dist-like directories:"
      dir /s /b | findstr dist
    displayName: 'Check Build Output'
    condition: succeededOrFailed()

  # Publish the dist folder as a build artifact
  - publish: $(System.DefaultWorkingDirectory)/dist/pfefrontend
    artifact: drop
    displayName: 'Publish Build Artifacts'

  # Deploy the artifact to Azure Web App
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'azure-connection-pfe'
      appName: 'pfe-frontend-app'
      package: $(Build.ArtifactStagingDirectory)/drop  # Use the published artifact
    displayName: 'Deploy to Azure Web App'
    condition: succeeded()
