trigger:
  - main
pool:
  name: Default
steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '22.13.1'
    displayName: 'Install Node.js'
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        echo "Node version:"
        node -v
        echo "NPM version:"
        npm -v
        echo "Directory contents:"
        dir
    displayName: 'Environment Info'
  
  - script: |
      npm config set strict-ssl false
      npm config set registry https://registry.npmjs.org/
      npm config set fetch-retries 100
      npm config set fetch-retry-mintimeout 60000
      npm config set fetch-retry-maxtimeout 300000
      npm config set timeout 0
      npm ci
    displayName: 'Install Dependencies'
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Install Angular CLI locally first (safer than global)
        npm install @angular/cli
        # Check Angular CLI version
        npx ng version
        # List project files to ensure angular.json is present
        echo "Current directory structure:"
        dir
        # Verify angular.json content
        echo "Angular.json content:"
        type angular.json
    displayName: 'Verify Angular Setup'
  
  - script: |
      # Build the Angular app with detailed error output
      echo "Building Angular app..."
      npx ng build --configuration=production --verbose
      # Check exit code
      if ($LASTEXITCODE -ne 0) {
        echo "Build failed with exit code $LASTEXITCODE"
        exit 1
      }
    displayName: 'Build Angular App'
    
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Check build output in great detail
        echo "Build output inspection:"
        echo "Current directory:"
        dir
        
        # Check for dist directory
        if (Test-Path dist) {
          echo "Dist directory exists:"
          dir dist
          # Check for pfefrontend subdirectory
          if (Test-Path dist/pfefrontend) {
            echo "pfefrontend directory exists:"
            dir dist/pfefrontend
          } else {
            echo "WARNING: dist exists but pfefrontend subdirectory not found"
            echo "Contents of dist:"
            dir dist
          }
        } else {
          echo "WARNING: dist directory not found"
          echo "Looking for any output directories:"
          dir /s /b | findstr dist
        }
    displayName: 'Inspect Build Output'
    condition: succeededOrFailed()
  
  # Publish the build artifacts - adjusted to handle either location
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Determine the correct path to publish
        $distPath = "dist/pfefrontend"
        if (Test-Path $distPath) {
          echo "Publishing from expected path: $distPath"
        } elseif (Test-Path "dist") {
          # Find the first directory in dist
          $firstDir = Get-ChildItem -Path "dist" -Directory | Select-Object -First 1
          if ($firstDir) {
            $distPath = "dist/$($firstDir.Name)"
            echo "Publishing from alternate path: $distPath"
          } else {
            echo "Publishing from dist directory itself"
            $distPath = "dist"
          }
        } else {
          echo "ERROR: Cannot find build output directory"
          exit 1
        }
        
        # Create variable for publish task
        Write-Host "##vso[task.setvariable variable=PublishPath]$distPath"
    displayName: 'Determine Publish Path'
    condition: succeededOrFailed()
  
  # Publish the build artifacts
  - publish: $(PublishPath)
    artifact: drop
    displayName: 'Publish Build Artifacts'
    condition: succeededOrFailed()
  
  # Deploy the artifact to Azure Web App
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'azure-connection-pfe'
      appName: 'pfe-frontend-app'
      package: $(Pipeline.Workspace)/drop
    displayName: 'Deploy to Azure Web App'
    condition: succeeded()
